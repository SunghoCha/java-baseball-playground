to do list

1~9의 숫자 중 랜덤으로 3개의 숫자를 구한다
- 1~9의 숫자인가?
- 중복 값이 있는가?
- 3자리인가?

위치와 숫자 값이 같은 경우 - 스트라이크

위치는 다른데 숫자 값이 같은 경우 - 볼

숫자 값이 다른 경우 - 낫싱

사용자가 입력한 값에 대한 실행 결과를 구한다

------
생성된 수 vs 입력된 수

input으로 입력된 수를 받아 생성된 수와 비교하여 output으로 스트라이크,볼,낫싱을 반환한다.

입력된 수에 관한 책임

생성된 수에 관한 책임

두 수를 가지고 특정 작업 수행하는 역할

작업 수행 후 결과값을 처리(출력)하는 역할



* 특정 작업을 어떻게 구현해야 할까?
작업이 복잡하다면 다른 객체와의 협력이 필요할 것이고 비교적 간단하다면 하나의 객체가 역할을 수행 (이런 경우는 드물 듯)
그렇다면 어떻게 나눠야하지? 우선 작업이 무엇인지 구체적으로 정의해나가면서 생각. 이 때 미리 클래스 분리를 염두에 두는 것은 초보자한테 위험할수도 있음
사실 알고리즘이나 이런 게임은 이미 기능이 정해진 상태라 절차지향적인 관점에서 기능을 작은 단위로 분해해가면서 메소드와 필드를 분배하는 느낌
이게 객체지향적이지 못한 부분이 있더라도 내 수준에서는 이렇게라도 해야 길을 잃지 않는 것 같음
기능을 최대한 작은 단위로 분해하고 그것부터 구현해서 쌓아올리는 방식으로 해야 그나마 안전함
작은 단위도 서로 독립적인 기능이 나올때까지 분리하고 쌓아올린다면 설사 그 방식이 최적화면에서 비효율적이더라도 기능은 하도록 만들어서 낭패를 보지 않을 수 있음
예를 들면 스트라이크, 볼, 낫싱의 의미에 집착하면 처음부터 주어진 3개의 숫자와 입력된 3개의 숫자를 동시에 비교하는 기능에 대해 생각하다 막힐 수 있음
주어진 규칙이 정의한 기능보다 더 작은 기능으로 쪼개서 이를 극복할 수 있다. 스트라이크,볼,낫싱을 구하기 위해 필요한 정보는 숫자의 위치값과 수 2가지이며 이를
완전탐색으로 3x3의 경우의 수에 대한 탐색을 해서 얻은 값을 바탕으로 결과를 산출한다는 점을 이해해야 한다.
이런 경우에 보통 이중for문에 if를 통한 조건을 넣어서 분류를 하는 것이 일반적인데 이 경우 리스트의 인덱스와 값을 이용한다.

사실 위의 경우뿐만 아니라 많은 경우 데이터가 인덱스와 값처럼 쌍을 이룬 데이터로 처리된다는 점을 유념해야 한다.
꼭 리스트뿐만 아니라 map이나 "객체"를 이용해서 필드값으로 위치값과 수를 주어서 처리하는 방법이 효과적일 수 있다.

더 나아가 일반화하면 인덱스나 key로 구분되는 객체를 컬렉션에 담고 있는 경우를 생각해야 한다. 구분하고자 하는 속성은 객체의 필드가 되고 속성들을 가진 사물이 객체가 된다.
이중for문을 돌려서 야구게임을 하는 경우는 컬렉션의 인덱스를 숫자의 자리수에 매칭시킨 특별한 경우에 불과하다는 점을 인식해야하고 인덱스에 이런식으로 바로 결합시키는 행위는
유연하지 못한 코드를 산출할 가능성이 큰 것 같다. 이와 다르게 ball이라는 객체에 position과 num을 담는 아이디어는 컬렉션의 인덱스와 자리수인 position을 분리하고 있어
보다 유연하게 코드를 작성할 수 있다. 인덱스에 속성을 바로 매칭시키지 말고 데이터를 컬렉션에 담아두기 위한 최소한의 구분자 역할로만 인식하고 속성은 객체 안에 담아 컬렉션을
이용하는 것이 더 유연하고 stream을 사용하기에도 더 편하다.

*입력을 받는 로직과 출력을 하는 로직은 보통 큰 틀이 정해져 있으므로 익숙해질 것

